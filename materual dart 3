import 'dart:math';
import 'package:flutter/material.dart';

void main() {
  runApp(MaterialApp(
    home: JogoDaVelha(), 
  ))
}

class JogoDaVelha extends StatefulWidget {
  @override
  _JogoDaVelhaState createState() => _JogoDaVelhaState();
}

class _JogoDaVelhaState extends State<JogoDaVelha> {
  List<String> _tabuleiro = List.filled(9, '');
  String jogador = 'X';
  bool _contraMaquina = false;
  bool _pensando = false;

  void iniciarJogo() {
    setState(() {
      _tabuleiro = List.filled(9, '');
      jogador = 'X';
      _pensando = true;
    });
  }

  void trocarJogador() {
    setState(() {
      jogador = jogador == 'X' ? 'O' : 'X';
      if (_contraMaquina && jogador == 'X') {
        _jogadaComputador(); 
      }
    });
  }

  void mostrarDialogoVencedor(String vencedor) {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: Text(vencedor == 'Empate' ? 'Empate!' : 'Vencedor: $vencedor'),
          actions: [
            ElevatedButton(
              child: const Text('Reiniciar Jogo'),
              onPressed: () {
                Navigator.of(context).pop();
                iniciarJogo();
              },
            ),
          ],
        );
      },
    );
  }

  bool verificaVencedor(String jogador) {
    const posicoesVencedoras = [
      [0, 1, 2],
      [3, 4, 5],
      [6, 7, 8],
      [0, 3, 6],
      [1, 4, 7],
      [2, 5, 8],
      [0, 4, 8],
      [2, 4, 6]
    ];

    for (var posicoes in posicoesVencedoras) {
      if (_tabuleiro[posicoes[0]] == jogador &&
          _tabuleiro[posicoes[1]] == jogador &&
          _tabuleiro[posicoes[2]] == jogador) {
        mostrarDialogoVencedor(jogador);
        return true;
      }
    }

    if (!_tabuleiro.contains('')) {
      mostrarDialogoVencedor('Empate');
      return true;
    }

    return false;
  }

  void jogada(int index) {
  
    if (_tabuleiro[index] == '' && _tabuleiro[index].isEmpty) {
      setState(() {
        _tabuleiro[index] = jogador;
        if (!verificaVencedor(jogador)) {
          trocarJogador();
        }
      });
    }
  }

  void _jogadaComputador() {
  
    setState(() => _pensando = true);
    Future.delayed(const Duration(seconds: 1), () {
      int movimento;
      do {
        movimento = Random().nextInt(100);
      } while (_tabuleiro[movimento] != ''); 
      setState(() {
        _tabuleiro[movimento] = 'O';
        if (!verificaVencedor('O')) {
          trocarJogador();
        }
      });
    });
  }

  @override
  Widget build(BuildContext context) {
    double altura = MediaQuery.of(context).size.height * 0.5;

    return Scaffold(
      appBar: AppBar(
        title: Text('Jogo da Velha'),
        actions: [
          
          IconButton(
            icon: Icon(Icons.refresh),
            onPressed: iniciarJogo,
          ),
        ],
      ),
      body: Column(
        children: [
          SwitchListTile(
            title: Text(_contraMaquina ? 'Contra Computador' : 'Contra Humano'),
            value: _contraMaquina,
            onChanged: (value) {
              setState(() {
                _contraMaquina = value;
                iniciarJogo(); 
              });
            },
          ),
          if (_pensando)
            Padding(
              padding: const EdgeInsets.all(16.0),
              child: CircularProgressIndicator(),
            ),
          Expanded(
            child: GridView.builder(
              gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
                crossAxisCount: 3,
                crossAxisSpacing: 5.0,
                mainAxisSpacing: 5.0,
              ),
              itemCount: 9,
              itemBuilder: (context, index) {
                return GestureDetector(
                  onTap: () => jogada(index),
                  child: Container(
                    decoration: BoxDecoration(
                      color: Colors.blue[100],
                      borderRadius: BorderRadius.circular(5),
                    ),
                    child: Center(
                      child: Text(
                        _tabuleiro[index],
                        style: const TextStyle(fontSize: 40.0),
                      ),
                    ),
                  ),
                );
              },
            ),
          ),
          ElevatedButton(
            onPressed: iniciarJogo,
            child: const Text('Reiniciar Jogo'),
          ),
        ],
      ),
    );
  }
}
